# Computer_structure
2021 1학기 컴퓨터구조론 내용정리

=============
0. 데이터 영역과 텍스트 영역

.data 


.text

ㄴ>이런식으로 영역을 두개로 나누면서 MIPS 프로그래밍은 시작된다. .data 밑에는 개발자가 사용할 데이터가 입력될 것이고, .text 밑에는 프로그래밍 언어가 기술될 것이다

=============
1. 레이블링

.text
main :

ㄴ> 콜론 (:) 를 사용하여 레이블링을 할 수 있다. loop 를 사용하여 점프를 하거나 할 때 이러한 레이블들이 사용될 것이다.
ㄴ> 레이블은 여러개일 수 있다. 하지만 프로그램은 항상 main 레이블에서부터 시작한다(마치 C와 같이)


===========
2. 레지스터

우측에 보면 MIPS 명령어에 필요한 32개의 레지스터가 보인다.

레지스터들은 자유롭게 사용될 수 있지만, 각별한 목적이 있는데 이들에 대한 설명은 다른 3주차 강의 문서에 저장되어 있다.

그리고 주소 앞에 $t 와 같이 대충 목적성이 짐작되도록 이름지어져있다.

==========
3. 어셈블링과 실행

한줄씩 실행해볼 수 있다.

먼저 코드를 다 짜고, 상단의 Assemble 버튼으로 말하자면 컴파일을 할 수 있다.


컴파일을 한 뒤에 넘어간 Execute 창에서, 상단의 한줄씩 실행하는 버튼을 누르면 한줄씩 실행한다.


명령어가 진행되면서 우측의 레지스터들을 어떻게 조작하는지를 관찰할 수 있다.


*하단의 Hexadecimal 버튼을 사용하면, 레지스터들에 저장된 값이 어떻게 보일 것인지를 결정할 수 있다
=====================
4. 데이터 세그먼트 만들기

i) 문자열

str : .asciiz "Hello" 

ㄴ>str 레이블에
ㄴ>asciiiz 형 자료형(=문자열 자료형)의
ㄴ>"Hello" 라는 문자열을 담았다.

이렇게 문자열을 str 레이블에 담고, 나중에 str 의 주소를 a0에 로드하여 사용할 것이다.


ii) 배열

array : .word 1,2,3,4,5
ㄴ>실질적인 자료형은 .word 이고, array 는 단지 .word 자료형의 데이터가 저장된 레이블의 이름일 뿐이다
ㄴ>array 에 그냥 " " 과 같은 공백문자도 담을 수 있다.

역시 배열을 array 레이블에 담고 ,나중에 array 의 주소를 a0에 로드하여 사용할 것이다.

======================
5. 데이터 세그먼트 사용하기

  la $a0, str
ㄴ>load address 라는 명령이다.
ㄴ>destination a0에, 레이블에 담긴 데이터의 주소를 담을 것이다.

ㄴ>이 경우엔 위에서 만든 str 이라는, .asciiz 라는 자료형의 문자열 데이터의 주소를 가져온다.


  li $v0, 4
  syscall
ㄴ>syscall 은, $v0 에 어떤 값이 저장되어 있느냐에 따라서 다른 작용을 한다.
ㄴ>지금은 4가 전달되었는데, 이것은 syscall 명령어가 $a0 의 주소에 담긴 string 하나를 출력하도록 한다.

  li $v0, 1
  syscall
ㄴ>이번에는 $v0 에 1이 전달되었다. 이것은 $a0 의 주소에 저장되어 있는 integer 하나를 출력하도록 한다.

  li $v0, 5
  syscall
ㄴ>5 가 전달되었을 때는, 콘솔로부터 integer 를 하나 입력받는다. 입력 이후에는 v0에 저장될 것이다.



정리
: 레이블에 데이터를 저장한다 - .asciiz 형 문자열, 또는 .word 형 배열
: 저장한 데이터의 주소를 la 를 통해 $a0 레지스터로 가져온다. 
: $v0 에 $a 에 따른 적절한 명령을 위한 정수를 전달한다 (1: 정수 1개 출력 ,4 : 문자열 출력, 5: 정수 1개 입력받아서 $v0에 저장, 10: 프로그램 종료)


: syscall 명령어로 $v0 에 저장된 값에 따른 동작을 수행한다.


