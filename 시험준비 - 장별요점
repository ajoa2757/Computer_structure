2# Computer_structure
2021 1학기 컴퓨터구조론 내용정리
1장 이론 

:수행환경은 오른쪽의 변수들로 구성된다 : CPI, Cycle rate, No.inst, Instructions per second
:아래 각각의 환경의 컴포넌트들이 바뀔때마다 영향받을 수 있는 변수들이 나열되어 있다.

알고리즘 : Inst, CPI
프로그래밍 언어 : Inst, CPI
컴파일러 : Inst, CPI
ISA : Inst, CPI, clock rate
프로세서 : 모두


:최종적으로 성능은 "시간" 만이 결정한다.

=============================
1장 시간, 사이클, 그리고 명령문.

문제 5 : 프로세서 P1, P2, P3 

Clock rate 와 CPI 로부터 성능을 계산하고자 한다.
ㄴ>CPI 는 cycles per Instruction, 명령문 하나에 몇 사이클 도냐?
ㄴ>Clock rate : 초당 몇 사이클을 도는가? => 헤르츠 단위.

명령문의 개수와 CPI 를 곱하면, 프로그램의 총 사이클 횟수가 나온다. 이것을 헤르츠로 나누면? 수행 시간이 구해질 것이다.

1. Highest Performance - instructions per second 를 계산할 수 있어야 한다.
2. 10초동안 프로그램을 수행한다, 사이클 횟수와 수행된 instruction 의 수를 계산할 수 있어야 한다.
3. 수행시간을 30퍼센트 줄이는 방법
ㄴ> 성능은 instruction / sec 로 정의된다. 수행 시간을 0.7배 하겠다는 것은 수행 속도를 1/0.7 배 하겠다는 것과 같은 말이다.



문제 6 : 프로세서 P1과 P2, 각각 4개의 계층으로 나누어서 처리한다 => 각 계층마다 CPI 가 별개로 존재, clock rate 는 모두 균일
총 inst 의 개수가 주어졌다. 그리고 각 계층이 inst 의 개수를 정해진 비율 만큼 나눠 가진다. 
0. 뭐가 더 빠른가? => 명령문 개수가 주어졌다. CPI 와 각 inst 비율을 통해 총 사이클 개수를 구하고 Clock rate 로 나눠주면 시간이 나올 것.

1. P1 과 P2 의 글로벌 CPI 는? -> inst 의 비율이 주어졌으니, 각각의 비율에 Cycle/inst 를 곱해 더하면 100% inst 에 대한 Cycle, 즉 글로벌 CPI구해진다.
ㄴ>0. 에서 총 시간을 구했다. 여기에 Clock rate 를 곱하면 총 사이클이 나온다. 제공된 inst 개수를 나누면 글로벌 CPI 를 얻는다.

2. inst 를 돌리기 위해 필요한 사이클의 횟수를 P1, P2에 대해 각각 구해라. => 글로벌 CPI 를 알잖아? 글로벌 CPI * Inst를 하면 총 사이클이 각각 구해진다.
ㄴ>

문제 7

서로 다른 컴파일러가 존재 : 총 명령문의 개수가 주어진다. 같은 프로세서를 사용하였을 때의 수행시간도 주어짐.

컴파일러는 개별적으로 명령어의 개수와 CPI 를 지닌다. 


1. 프로세서의 Cycle rate 를 줄게. CPI 를 구해라.
ㄴ> 수행시간 곱하기 Cycle rate : 각 경우의 총 사이클 횟수. 주어진 총 명령문의 개수로 나누면 CPI

2. 이번엔 프로세서를 바꿔 보자. 근데 수행시간이 똑같았어. A 가 얼마나 더 Clock rate 가 빠른 프로세서를 사용한 걸까?
ㄴ>CPI 와 Inst 의 개수는 유지된다. 
ㄴ>대충 답은 (B 의 사이클 횟수 / A 의 사이클 횟수) 라고 함.

문제 9

어떤 프로그램의 명령문 구성과 그 개수가 주어져 있고, 각 구성마다의 CPI 가 따로 주어졌다.

프로세서의 C/S 가 주어졌다. 프로세서가 하나 추가될 때마다 명령문의 개수 구성이 달라진다.

ㄴ>사이클의 개수 구성 역시 달라져야 한다. CPI 는 영향을 받지 않는다고 하였으므로, 바뀐 명령문의 개수를 가지고 바뀐 클럭의 개수를 계산해 주면 된다. 

문제 12

두 프로세서의 CPI, Cycle rate, No. inst 가 주어져 있다.

1. 프로세서의 클럭이 반드시 퍼포먼스의 우위로 이어지지는 않는 이유
2. No.inst 가 반드시 성능의 열등으로 이어지지는 않는 이유
3. Instructions per second 가 반드시 성능의 우위로 이어지지는 않는 이유

문제 13

프로그램의 구성 시간을 줄이고자 하는 문제

1. 프로그램이 여러 구성 요소들을 수행시키면서 동작한다
2. 흔한 실수는, 이중 한가지 구성 요소의 수행 성능만을 향상시키면서 성능향상을 노리는 경우이다.
3. 하지만, 이 비율이 작으면 작을수록, 한가지 요소의 성능만을 향상시키는 것은 생각보다 큰 도움이 되지 못하는 경우가 많다.

==============================



