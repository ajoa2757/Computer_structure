2# Computer_structure
2021 1학기 컴퓨터구조론 내용정리
1장 이론 

:수행환경은 오른쪽의 변수들로 구성된다 : CPI, Cycle rate, No.inst, Instructions per second
:아래 각각의 환경의 컴포넌트들이 바뀔때마다 영향받을 수 있는 변수들이 나열되어 있다.

알고리즘 : Inst, CPI
프로그래밍 언어 : Inst, CPI
컴파일러 : Inst, CPI
ISA : Inst, CPI, clock rate
프로세서 : 모두


:최종적으로 성능은 "시간" 만이 결정한다.

=============================
1장 시간, 사이클, 그리고 명령문.

문제 5 : 프로세서 P1, P2, P3 

Clock rate 와 CPI 로부터 성능을 계산하고자 한다.
ㄴ>CPI 는 cycles per Instruction, 명령문 하나에 몇 사이클 도냐?
ㄴ>Clock rate : 초당 몇 사이클을 도는가? => 헤르츠 단위.

명령문의 개수와 CPI 를 곱하면, 프로그램의 총 사이클 횟수가 나온다. 이것을 헤르츠로 나누면? 수행 시간이 구해질 것이다.

1. Highest Performance - instructions per second 를 계산할 수 있어야 한다.
2. 10초동안 프로그램을 수행한다, 사이클 횟수와 수행된 instruction 의 수를 계산할 수 있어야 한다.
3. 수행시간을 30퍼센트 줄이는 방법
ㄴ> 성능은 instruction / sec 로 정의된다. 수행 시간을 0.7배 하겠다는 것은 수행 속도를 1/0.7 배 하겠다는 것과 같은 말이다.



문제 6 : 프로세서 P1과 P2, 각각 4개의 계층으로 나누어서 처리한다 => 각 계층마다 CPI 가 별개로 존재, clock rate 는 모두 균일
총 inst 의 개수가 주어졌다. 그리고 각 계층이 inst 의 개수를 정해진 비율 만큼 나눠 가진다. 
0. 뭐가 더 빠른가? => 명령문 개수가 주어졌다. CPI 와 각 inst 비율을 통해 총 사이클 개수를 구하고 Clock rate 로 나눠주면 시간이 나올 것.

1. P1 과 P2 의 글로벌 CPI 는? -> inst 의 비율이 주어졌으니, 각각의 비율에 Cycle/inst 를 곱해 더하면 100% inst 에 대한 Cycle, 즉 글로벌 CPI구해진다.
ㄴ>0. 에서 총 시간을 구했다. 여기에 Clock rate 를 곱하면 총 사이클이 나온다. 제공된 inst 개수를 나누면 글로벌 CPI 를 얻는다.

2. inst 를 돌리기 위해 필요한 사이클의 횟수를 P1, P2에 대해 각각 구해라. => 글로벌 CPI 를 알잖아? 글로벌 CPI * Inst를 하면 총 사이클이 각각 구해진다.
ㄴ>

문제 7

서로 다른 컴파일러가 존재 : 총 명령문의 개수가 주어진다. 같은 프로세서를 사용하였을 때의 수행시간도 주어짐.

컴파일러는 개별적으로 명령어의 개수와 CPI 를 지닌다. 


1. 프로세서의 Cycle rate 를 줄게. CPI 를 구해라.
ㄴ> 수행시간 곱하기 Cycle rate : 각 경우의 총 사이클 횟수. 주어진 총 명령문의 개수로 나누면 CPI

2. 이번엔 프로세서를 바꿔 보자. 근데 수행시간이 똑같았어. A 가 얼마나 더 Clock rate 가 빠른 프로세서를 사용한 걸까?
ㄴ>CPI 와 Inst 의 개수는 유지된다. 
ㄴ>대충 답은 (B 의 사이클 횟수 / A 의 사이클 횟수) 라고 함.

문제 9

어떤 프로그램의 명령문 구성과 그 개수가 주어져 있고, 각 구성마다의 CPI 가 따로 주어졌다.

프로세서의 C/S 가 주어졌다. 프로세서가 하나 추가될 때마다 명령문의 개수 구성이 달라진다.

ㄴ>사이클의 개수 구성 역시 달라져야 한다. CPI 는 영향을 받지 않는다고 하였으므로, 바뀐 명령문의 개수를 가지고 바뀐 클럭의 개수를 계산해 주면 된다. 

문제 12

두 프로세서의 CPI, Cycle rate, No. inst 가 주어져 있다.

1. 프로세서의 클럭이 반드시 퍼포먼스의 우위로 이어지지는 않는 이유
2. No.inst 가 반드시 성능의 열등으로 이어지지는 않는 이유
3. Instructions per second 가 반드시 성능의 우위로 이어지지는 않는 이유

문제 13

프로그램의 구성 시간을 줄이고자 하는 문제

1. 프로그램이 여러 구성 요소들을 수행시키면서 동작한다
2. 흔한 실수는, 이중 한가지 구성 요소의 수행 성능만을 향상시키면서 성능향상을 노리는 경우이다.
3. 하지만, 이 비율이 작으면 작을수록, 한가지 요소의 성능만을 향상시키는 것은 생각보다 큰 도움이 되지 못하는 경우가 많다.

==============================
2장

문제 3 - C 언어 to MIPS


B[8] = A[i-j]
ㄴ> A 와 B 의 베이스 주소는 레지스터에 주어져 있다. 인덱스 i 와 j 의 값 역시 주어져 있는 것으로 보인다.
ㄴ> 추가적으로 변수 f, g, h 를 사용할 수 있도록 레지스터가 확보되어 있다.
1. subu 로 i-j 라는 인덱스를 변수 g 에 확보한다.
ㄴ>!!!!!!!array 는 기본적으로 .word array 를 전제한다.
ㄴ>고로 sll $t0, $t0, 2 하면 비로소 주소 대역에서 사용할 수 있는 인덱스가 된다.

2. add 로 베이스 주소 + g, 즉 A[i-j] 의 주소를 변수 h 에 확보한다.
3. lw 를 통해 f 에 주소 h 에 있는 값을 얻는다.
4. addi 로 B[8] 의 주소를 확보한다.
5. add 로 B[8] 에 A[i-j] 로드한다.


문제 4 - MIPS to C 

이번엔 반대로 MIPS 를 C 로 해석해야 한다.

문제 5 - 최적화?

1. 배열 조작을 할 땐, .word 배열 기준 인덱스는 4바이트 단위로 존재한다.
2. 배열의 주소를 가지고 값을 따서 쓰고 싶을땐 무조건 lw 로 한개씩 가져와서 쓰는 수 밖에 없다.
3. 1번의 특성 덕분에, lw $t0, 4($s0) 와 같은 방법으로 베이스주소 s0 를 가지는 배열의 베이스 다음 원소를 참조할 수 있다.

문제 20 - 비트 컨트롤

1. sll 과 srl 을 했을 때 새로 들어오는 비트들은 전부 0으로 처리된다.
2. or / and 연산은 비트 단위의 연산이다. 즉 이진수로 나타낸 표현에서 디지털논리회로 연산을 한다는 이야기다
3. 이것을 사용해서 특정 비트는 비우고 특정 비트의 값만 남긴 뒤, or 또는 and 연산을 통해서 값을 전달하는 것이 가능하다.

문제 34 - 코딩 국룰

1. 함수에 매개변수는 무조건 $a0 부터 개수에 맞춰서 $an 까지 들어간다
2. 결과물은 무조건 $v0 에 저장되는 것이다.

문제 40번 - 점프의 한계

1. 점프는, PC 레지스터를 LSB 기준으로 총 26비트만 바꿀 수 있다.
2. 브랜치는, 16비트, 

=========================
3장

2의 보수 : 비트반전 후 1 더하기.
MSB 와 LSB : 1011 1110 1111 1000 에서, MSB 는 왼쪽 끝의 1 이고 LSB 는 오른쪽 끝의 0 이다.

Signed Int 표현 : MSB 가 1이면 음수, MSB 가 0 이면 양수이다.
ㄴ>4비트 0011 가 32비트 수가 되면, MSB 가 상위 비트들을 모두 차지하게 된다.
ㄴ>이것을 Sign extension 이라고 부른다
ㄴ>음수 1011 의 경우 1 이 extend 된다. 

Overflow : 연산 결과가 기준 자료형에 담아질 수 없을 때 (32비트 정수의 사칙연산이 32비트로 표현할 수 없는 크기가 되는 경우)

문제 22 - 주어진 32비트( = 4바이트, 8자리 16진수 패턴)패턴이 부동소수점 표현으로 어떤 십진수를 나타내는 것인가? IEEE 754 standard 를 사용할 것

IEEE 754 부동소수점 표현
1. 부동소수점 표현은 Half(16비트), 싱글(32비트), 더블(64비트) 로 나뉜다.
2. 부호 1비트, exponent, fration 세가지 영역으로 나뉘고, 각각의 비트 구성은 자료의 크기마다 다르다.
3. Exponent 의 영역에는 각 자료형에 따른 Bias 값이 설정되어 있다. 여기에 넣고자 하는 수의 이진수 자릿수에 해당하는 n을 더해야 한다.
4. Fration 의 영역에는 부동소수점 표현의 진수부가 Exponent 영역 이후 상위비트부터 차례로 입력된다. 남는 영역은 0으로 채워진다.\

5. Half : 1,5,10 Bias : 01111// Single : 1, 8, 23 Bias: 01111111// Double : 1,11,52 Bias 0111111111
0000 1100 0000 0000 0000 0000 0000 0000

6. Exponent : exp 에 입력된 수 - Bias = n, 실제 곱해진 2^n. 가령, 2의 5승짜리는 '5+Bias' 의 비트 패턴이 들어간다.
7. Fraction : 1.0(2) 에서 시작한다. 이후에 Fraction 영역의 비트패턴이 그대로 소수점 영역으로 들어간다.


IBM 부동소수점 표현

1. 부동소수점 표현은 싱글, 더블, 쿼드러플(128비트) 로 나뉜다.
2. 부호 1비트, exp 7비트 고정, 나머지는 모두 Fraction 으로 들어간다.
3. 16진수로 바꾸고 생각을 시작해야 한다. 가령 0x3F.40 을 보자.

4. 우선 0.3F40 * 16^2 으로 바꾼다. 3F40 이 Fraction 영역에 들어간다.
5. 16^2 = 16^(E-64) 로 표현된다. 즉 여기서 E = 66 이 들어간다.


부동소수점 덧셈뺄셈

1. X가 Y 보다 작다고 전제하자
2. Y 의 Fraction 영역에 X 의 Fraction 영역을 그대로 갖다 붙힐 것이다.
3. 그래서, X가 더 작은 만큼(exp 영역 비교) Fraction 영역에 필요한 만큼 2^-n 을 곱해서 축소시키고, 그대로 Y 의 Fraction 영역에 붙인다.
4. 이후 Y 의 Exp 영역을 그대로 숫자에 사용하면 끝


부동소수점 곱셈 나눗셈

1. Fraction 영역은 있는 그대로 이진수 곱셈을 한다.
2. Exp 영역은 서로 더한다. 이렇게 되면 각각의 'Exp + 2*Bias' 의 비트 패턴이 입력된다. 따라서 최종 비트 패턴이 입력될 땐 Bias 를 1회 빼야 한다.
3. 각 영역을 사용해서 결과값을 완성시킨다.


부동소수점의 Rounding

1. 계산의 결과 Fraction 영역으로부터 G,R,S 비트 세개를 추산해낼 수 있다. 이들로부터 올림 여부를 판단한다.
2. Shift 를 했는데 Fraction 영역을 벗어난 수들로부터 뽑아낸다.
3. 영역을 벗어난 수 중 첫번째 수가 G, 두번째 수가 R, 그리고 그 나머지 비트 패턴의 or 연산 결과가 S 이다.
4. 비트 패턴 GRS 가 5 이상이면 그때 올린다. 마치 반올림과 같은 메커니즘


문제 23

111111.01 을 부동소수점 비트표현에 집어넣기

1. exp = 5 이다. Bias 는 127 이므로(single) 5+127 = 132 가 exp 영역에 입력된다.
2. Fraction = 1111101 비트패턴이 왼쪽으로 당겨져서 입력된다.
3. sign = 1

문제 24



















