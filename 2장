# Computer_structure
2021 1학기 컴퓨터구조론 내용정리

2장에서는 주로 ISA(instruction set architecture) 를 배운다.

구조는 처음 만들떄 잘 만들어야 하며, 한번 만들어지면 오래 사용하게 된다.

ISA 는 한 마이크로프로세서의 시장성을 결정하는 중요한 문제이다,

================
Fetch, Decode, Execution 이 세가지 과정을 계속해서 반복하게 된다.


프로세스의 메모리에는 여러 프로그램이 데이터와 같이 저장이 되어 있다.
ㄴ>이것은 저장되어 있는 데이터와 구분이 힘들다.

따라서, 데이터와 마찬가지로 어떤 프로그램이 들어가느냐에 따라서 컴퓨터의 성능이 달라진다.

이것이 Stored-Program Concept 다. 

================
명령어의 구성
 
한 줄의 명령어는 다음과 같이 구성된다 

OPCODE - Operands

ㄴ>OPCODE 부분은, 명령어가 어떤 명령어인지를 정의한다. 이 부분을 CPU 가 읽고 정의를 내린다.
ㄴ>Operands 부분은, OPCODE 에 따라서 다르게 해석되는 부분으로, 연산에 이용되는 데이터들이 담겨있다.

================
산술연산의 표현 - PostFIx

ABC+* 

1. ABC 가 순서대로 스택에 push 된다
2. + 연산자가 push 되면, pop 을 2회 하여 BC 를 add 한다.
3. * 연산자가 push 되면, 앞서 add 된 레지스터의 숫자와 그 아래에 있는 A 를 계산한다.

=================(중요)
RISC(reduced instruction set computer)

명령 하나하나가 수행되는 시간이 작고 일정하다 라는 뜻.
ㄴ>16비트/32 비트로 명령어의 길이가 동일해진다.

파이프라인 하나로 마이크로 CPU 를 제작할 수 있다
ㄴ>트럭이랑 승용차를 부품 하나하나로 나누어서 제작하면, 같은 공장 라인에서 만들 수 있다.

MIPS 가 RISC 계열의 명령어 체계 중 하나이다.

===================
MIPS 에 대하여

여러 산술 processor 들이  읽어올 수 있는 분야가 한정되어 있다.
ㄴ> 부동소수점 단위를 해석하는 영역
ㄴ> 그리고 integer 단위를 해석하는 영역


이때, 서로 다른 유닛이 읽어와야 하는 영역끼리 연산을 해야 하는 경우는 불가능하다. 따라서 한 영역에서 다른 영역으로 데이터가 옮겨와서 해석된다
ㄴ>가령, C언어에서 integer 와 double 을 서로 연산하려고 하는 경우

MIPS 의 명령어는 총 세가지 종류로 구성된다

R : c=a+b 와 같은 연산을 할 때, rt(register target) , rs(register source), rd(register direction) 세 종류의 레지스터를 사용한다.
I : R 과 유사한 역할을 하는 영역이다, 다만, rd 대신 im(immediate, 임의의 영역, 즉시값) 을 사용한다. 
J : 특정 메모리 주소로 이동할때 쓰이는 명령어들이다.


레지스터는 32비트 존재한다. 

메인 메모리가 있는데, 바이트(4비트)마다 주소가 존재한다. 이것을 alignment restriction 이라고 한다.

================
